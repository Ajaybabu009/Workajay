/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 */

#import "SNMFeatureAbstract.h"
#import "SNMFeatureAbstractInternal.h"
#import "SNMFeatureAbstractPrivate.h"
#import "SNMSonomaInternal.h"
#import "SNMUserDefaults.h"
#import "SNMUtils.h"
#import "SonomaCore+Internal.h"

@implementation SNMFeatureAbstract

@synthesize logManager = _logManager;
@synthesize delegate = _delegate;

- (instancetype)init {
  return [self initWithStorage:kSNMUserDefaults];
}

- (instancetype)initWithStorage:(SNMUserDefaults *)storage {
  if (self = [super init]) {

    _isEnabledKey = [NSString stringWithFormat:@"kSNM%@IsEnabledKey", self.storageKey];
    _storage = storage;
  }
  return self;
}

#pragma mark : - SNMFeatureCommon

- (void)setEnabled:(BOOL)isEnabled {
  @synchronized(self) {
    if (!isEnabled) {

      // Delete logs generated by this feature.
      if (self.logManager) {
        [self.logManager deleteLogsForPriority:self.priority];
      }
    }

    // Persist the enabled status.
    [self.storage setObject:[NSNumber numberWithBool:isEnabled] forKey:self.isEnabledKey];
  }
}

- (BOOL)isEnabled {
  @synchronized(self) {
    /**
     *  Get isEnabled value from persistence.
     * No need to cache the value in a property, user settings already have their cache mechanism.
     */
    NSNumber *isEnabledNumber = [_storage objectForKey:_isEnabledKey];

    // Return the persisted value otherwise it's enabled by default.
    return (isEnabledNumber) ? [isEnabledNumber boolValue] : YES;
  }
}

- (void)onLogManagerReady:(id<SNMLogManager>)logManager {
  self.logManager = logManager;
}

- (BOOL)canBeUsed {
  BOOL canBeUsed = [SNMSonoma sharedInstance].sdkStarted && self.featureInitialized;
  [self storageKey];

  if (!canBeUsed) {
    SNMLogError(@"[%@] ERROR: %@ module hasn't been initialized. You need to call [SNMSonoma "
                @"start:YOUR_APP_SECRET withFeatures:LIST_OF_FEATURES] or [SNMSonoma "
                @"startFeature:FEATURE] first.",
                CLASS_NAME_WITHOUT_PREFIX, CLASS_NAME_WITHOUT_PREFIX);
  }
  return canBeUsed;
}

#pragma mark : - SNMFeature

- (void)startFeature {
  self.featureInitialized = YES;

  // Send pending logs if persistence has logs that are not sent yet
  [self.logManager flushPendingLogsForPriority:self.priority];
}

+ (void)setEnabled:(BOOL)isEnabled {
  if ([[self sharedInstance] canBeUsed] && [[self sharedInstance] isEnabled] != isEnabled) {
    [[self sharedInstance] setEnabled:isEnabled];
  }
}

+ (BOOL)isEnabled {
  if ([[self sharedInstance] canBeUsed]) {
    return [[self sharedInstance] isEnabled];
  } else {
    return NO;
  }
}

@end
